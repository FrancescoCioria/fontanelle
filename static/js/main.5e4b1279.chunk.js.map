{"version":3,"sources":["roundGeoCoordinate.ts","getOpenStreetMapAmenity.ts","DrinkingWaterMarker.tsx","PublicToiletsMarker.tsx","Map.tsx","getDrinkingWater.ts","getPublicToilets.ts","serviceWorkerRegistration.ts","ServiceWorkerWrapper.tsx","App.tsx","index.tsx"],"names":["geoCoordinate","Math","round","async","roundedLat","roundGeoCoordinate","options","lat","roundedLng","lng","formData","amenity","around","res","fetch","json","cachedItems","localforage","nodes","uniqBy","concat","elements","i","id","props","enableBackground","height","viewBox","width","fill","color","d","version","x","y","xmlSpace","mapboxgl","window","MapFountains","React","map","none","drinkingWaterNodes","drinkingWaterMarkers","publicToiletsNodes","publicToiletsMarkers","updateDrinkingWater","getItem","then","items","this","addWaterMarkers","getCenter","getOpenStreetMapAmenity","updateDrinkingWaterDebounce","debounce","updatePublicToilets","addPublicToiletsMarkers","updatePublicToiletsDebounce","addMarkers","cacheMap","markerElement","cachedMarkers","filter","node","distance","lon","units","forEach","element","document","createElement","ReactDOM","marker","Marker","setLngLat","addTo","push","DrinkingWaterMarker","PublicToiletsMarker","initializeMap","accessToken","navigator","geolocation","getCurrentPosition","e","Map","container","style","center","coords","latitude","longitude","zoom","scrollZoom","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","ScaleControl","on","some","querySelector","click","componentDidMount","componentDidUpdate","requestAnimationFrame","resize","render","grow","isLocalhost","Boolean","location","hostname","match","register","config","URL","process","href","origin","addEventListener","swUrl","headers","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","scope","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ServiceWorkerWrapper","showReload","setShowReload","useState","waitingWorker","setWaitingWorker","onSWUpdate","fromNullable","waiting","useEffect","className","vAlignContent","hAlignContent","background","marginLeft","textDecoration","cursor","onClick","ww","postMessage","type","App","column","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5e4b1279.chunk.js","sourcesContent":["// round to .x5 (ex: 45.227 -> 45.25; 45.221 -> 45.20)\nexport default (geoCoordinate: number) => {\n  // return (Math.round((geoCoordinate * 100) / 5) * 5) / 100;\n\n  return Math.round(geoCoordinate * 100) / 100;\n};\n","import roundGeoCoordinate from \"./roundGeoCoordinate\";\nimport * as localforage from \"localforage\";\nimport uniqBy from \"lodash/uniqBy\";\n\nimport \"localforage-getitems\";\n\nexport type OpenStreetMapNode = { id: number; lat: number; lon: number };\nexport type Options = {\n  amenity: \"drinking_water\" | \"toilets\";\n  around: number;\n  lat: number;\n  lng: number;\n};\n\nexport default async (options: Options): Promise<OpenStreetMapNode[]> => {\n  const roundedLat = roundGeoCoordinate(options.lat);\n  const roundedLng = roundGeoCoordinate(options.lng);\n\n  const formData = `\n    [out:json];\n    (node[\"amenity\"=\"${options.amenity}\"](around:${options.around},${roundedLat},${roundedLng}););\n    out;>;out;\n  `;\n\n  const res = await fetch(\n    `https://overpass-api.de/api/interpreter?data=${formData}&output`\n  );\n\n  const json: { elements: OpenStreetMapNode[] } = await res.json();\n\n  const cachedItems =\n    (await localforage.getItem<OpenStreetMapNode[]>(options.amenity)) || [];\n\n  const nodes = uniqBy(cachedItems.concat(json.elements), i => i.id);\n\n  // fire&forget\n  localforage.setItem(options.amenity, nodes);\n\n  return nodes;\n};\n","import * as React from \"react\";\n\nexport default (props: { color?: string }) => (\n  <svg\n    id=\"Layer_1\"\n    enableBackground=\"new 0 0 512 512\"\n    height=\"20px\"\n    viewBox=\"0 0 512 512\"\n    width=\"20px\"\n    fill={props.color || \"blue\"}\n  >\n    <g>\n      <path d=\"m421.082 355.479c-16.269-24.198-32.288-43.872-32.962-44.698-2.849-3.49-7.115-5.514-11.62-5.514s-8.771 2.024-11.62 5.514c-.674.826-16.693 20.5-32.962 44.698-34.685 51.594-34.685 70.908-34.685 77.255 0 43.708 35.559 79.267 79.267 79.267s79.267-35.559 79.267-79.267c0-6.347 0-25.662-34.685-77.255z\" />\n      <path d=\"m71.233 64.267h224.934c8.284 0 15-6.716 15-15v-34.267c0-8.284-6.716-15-15-15h-224.934c-8.284 0-15 6.716-15 15v34.267c0 8.284 6.716 15 15 15z\" />\n      <path d=\"m56.233 159.6v64.267c0 8.284 6.716 15 15 15h19.267v-94.267h-19.267c-8.284 0-15 6.716-15 15z\" />\n      <path d=\"m329.366 256c0 8.284 6.716 15 15 15h64.268c8.284 0 15-6.716 15-15v-32.133c0-43.708-35.56-79.267-79.268-79.267h-67.466v94.267h52.466z\" />\n      <path d=\"m231.9 128.533h-1.067v-34.266h-94.267v34.267h-1.066c-8.284 0-15 6.716-15 15v96.4c0 8.284 6.716 15 15 15h96.4c8.284 0 15-6.716 15-15v-96.4c0-8.285-6.715-15.001-15-15.001z\" />\n    </g>\n  </svg>\n);\n","import * as React from \"react\";\n\nexport default (props: { color?: string }) => (\n  <svg\n    version=\"1.1\"\n    id=\"Capa_1\"\n    x=\"0px\"\n    y=\"0px\"\n    width=\"20px\"\n    height=\"20px\"\n    viewBox=\"0 0 395 395\"\n    xmlSpace=\"preserve\"\n    fill={props.color || \"black\"}\n  >\n    <g>\n      <path d=\"M229.412,130.862c-2.405-3.355-6.284-5.346-10.412-5.346h-1.266c-5.524,0-10.424,3.539-12.161,8.782l-27.534,83.09   l-27.662-83.107c-1.743-5.233-6.639-8.765-12.156-8.765h-0.822c-0.051,0-0.104,0.003-0.153,0.003c-0.053,0-0.105-0.003-0.155-0.003   h-0.998c-5.524,0-10.425,3.539-12.163,8.782l-27.533,83.09l-27.661-83.107c-1.742-5.233-6.64-8.765-12.156-8.765h-1.268   c-4.13,0-8.007,1.991-10.414,5.346c-2.407,3.357-3.045,7.669-1.72,11.579l40.125,118.344c1.763,5.201,6.643,8.698,12.135,8.698   h0.53c0.153,0,0.303-0.008,0.455-0.014c0.151,0.006,0.302,0.014,0.454,0.014h0.354c5.5,0,10.386-3.511,12.142-8.721l27.845-82.675   l27.718,82.657c1.751,5.221,6.642,8.739,12.148,8.739h0.527c0.153,0,0.303-0.008,0.456-0.014c0.15,0.006,0.302,0.014,0.454,0.014   h0.355c5.491,0,10.37-3.497,12.134-8.698l40.125-118.344C232.459,138.531,231.818,134.22,229.412,130.862z\" />\n      <path d=\"M347.88,232.295c-4.756-4.416-12.063-4.578-17.01-0.378c-8.521,7.234-19.511,11.218-30.943,11.218   c-26.069,0-47.277-20.51-47.277-45.721c0-25.116,21.208-45.548,47.277-45.548c11.542,0,22.522,3.916,30.921,11.027   c5.087,4.306,12.625,3.995,17.339-0.719l0.427-0.427c2.544-2.542,3.899-6.036,3.74-9.628c-0.161-3.592-1.822-6.952-4.58-9.258   c-13.371-11.184-30.366-17.344-47.848-17.344c-40.598,0-73.628,32.253-73.628,71.898c0,39.739,33.03,72.07,73.628,72.07   c17.454,0,34.493-6.207,47.979-17.48c2.822-2.36,4.495-5.817,4.589-9.494c0.098-3.678-1.393-7.22-4.087-9.723L347.88,232.295z\" />\n      <path d=\"M313.001,0H81.999C36.785,0,0,36.784,0,81.998v230.993C0,358.211,36.785,395,81.999,395h231.002   C358.216,395,395,358.211,395,312.991V81.998C395,36.784,358.216,0,313.001,0z M380,312.991C380,349.94,349.945,380,313.001,380   H81.999C45.056,380,15,349.94,15,312.991V81.998C15,45.055,45.056,15,81.999,15h231.002C349.945,15,380,45.055,380,81.998V312.991z   \" />\n    </g>\n  </svg>\n);\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport debounce from \"lodash/debounce\";\nimport View from \"react-flexview\";\nimport { Option, none, some, map } from \"fp-ts/lib/Option\";\nimport { OpenStreetMapNode } from \"./getOpenStreetMapAmenity\";\nimport getDrinkingWater from \"./getDrinkingWater\";\nimport DrinkingWaterMarker from \"./DrinkingWaterMarker\";\nimport getPublicToilets from \"./getPublicToilets\";\nimport PublicToiletsMarker from \"./PublicToiletsMarker\";\nimport distance from \"@turf/distance\";\nimport localforage from \"localforage\";\n\nimport \"./map.scss\";\n\nconst mapboxgl = window.mapboxgl;\n\nclass MapFountains extends React.PureComponent<{}> {\n  map: Option<mapboxgl.Map> = none;\n\n  drinkingWaterNodes: {\n    [id: string]: OpenStreetMapNode;\n  } = {};\n\n  drinkingWaterMarkers: mapboxgl.Marker[] = [];\n\n  publicToiletsNodes: {\n    [id: string]: OpenStreetMapNode;\n  } = {};\n\n  publicToiletsMarkers: mapboxgl.Marker[] = [];\n\n  updateDrinkingWater = () => {\n    map<mapboxgl.Map, void>(map => {\n      localforage.getItem<OpenStreetMapNode[]>(\"drinking_water\").then(items => {\n        if (items) {\n          this.addWaterMarkers(items);\n        }\n      });\n\n      getDrinkingWater({\n        around: 1000,\n        lat: map.getCenter().lat,\n        lng: map.getCenter().lng\n      }).then(this.addWaterMarkers);\n    })(this.map);\n  };\n\n  updateDrinkingWaterDebounce = debounce(() => {\n    this.updateDrinkingWater();\n  }, 1000);\n\n  updatePublicToilets = () => {\n    map<mapboxgl.Map, void>(map => {\n      localforage.getItem<OpenStreetMapNode[]>(\"toilets\").then(items => {\n        if (items) {\n          this.addPublicToiletsMarkers(items);\n        }\n      });\n\n      getPublicToilets({\n        around: 1000,\n        lat: map.getCenter().lat,\n        lng: map.getCenter().lng\n      }).then(this.addPublicToiletsMarkers);\n    })(this.map);\n  };\n\n  updatePublicToiletsDebounce = debounce(() => {\n    this.updatePublicToilets();\n  }, 1000);\n\n  initializeMap() {\n    mapboxgl.accessToken =\n      \"pk.eyJ1IjoiZnJhbmNlc2NvY2lvcmlhIiwiYSI6ImNqcThyejR6ODA2ZDk0M25rZzZjcGo4ZmcifQ.yRWHQbG1dJjDp43d01bBOw\";\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(e => {\n        const map = new mapboxgl.Map({\n          container: \"map\",\n          style:\n            \"mapbox://styles/francescocioria/cjqi3u6lmame92rmw6aw3uyhm?optimize=true\",\n          center: {\n            lat: e.coords.latitude,\n            lng: e.coords.longitude\n          },\n          zoom: 15.0,\n          scrollZoom: false\n        });\n\n        map.addControl(\n          new mapboxgl.GeolocateControl({\n            positionOptions: {\n              enableHighAccuracy: true\n            },\n            trackUserLocation: true\n          })\n        );\n\n        map.addControl(new mapboxgl.ScaleControl());\n\n        map.on(\"load\", () => {\n          this.map = some(map);\n\n          this.updateDrinkingWater();\n          this.updatePublicToilets();\n\n          (\n            document.querySelector(\".mapboxgl-ctrl-geolocate\") as HTMLElement\n          )?.click();\n        });\n\n        map.on(\"move\", () => {\n          this.updateDrinkingWaterDebounce();\n          this.updatePublicToiletsDebounce();\n        });\n      });\n    }\n  }\n\n  addMarkers = (\n    nodes: OpenStreetMapNode[],\n    cacheMap: { [k: string]: OpenStreetMapNode },\n    markerElement: JSX.Element,\n    cachedMarkers: mapboxgl.Marker[]\n  ) => {\n    map<mapboxgl.Map, void>(map => {\n      const lat = map.getCenter().lat;\n      const lng = map.getCenter().lng;\n\n      nodes\n        .filter(node => {\n          const distanceInKm = distance([lat, lng], [node.lat, node.lon], {\n            units: \"kilometers\"\n          });\n\n          return distanceInKm < 2;\n        })\n        .forEach(node => {\n          if (!cacheMap[node.id]) {\n            const element = document.createElement(\"div\");\n            ReactDOM.render(markerElement, element);\n\n            const marker: mapboxgl.Marker = new mapboxgl.Marker({\n              element\n            }).setLngLat([node.lon, node.lat]);\n\n            marker.addTo(map);\n\n            cacheMap[node.id] = node;\n\n            cachedMarkers.push(marker);\n          }\n        });\n    })(this.map);\n  };\n\n  addWaterMarkers = (drinkingWaterNodes: OpenStreetMapNode[]) => {\n    this.addMarkers(\n      drinkingWaterNodes,\n      this.drinkingWaterNodes,\n      <DrinkingWaterMarker />,\n      this.drinkingWaterMarkers\n    );\n  };\n\n  addPublicToiletsMarkers = (publicToiletsNodes: OpenStreetMapNode[]) => {\n    this.addMarkers(\n      publicToiletsNodes,\n      this.publicToiletsNodes,\n      <PublicToiletsMarker />,\n      this.publicToiletsMarkers\n    );\n  };\n\n  componentDidMount() {\n    this.initializeMap();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(() => {\n      map<mapboxgl.Map, void>(map => map.resize())(this.map);\n    });\n  }\n\n  render() {\n    return <View grow id=\"map\" />;\n  }\n}\n\nexport default MapFountains;\n","import getOpenStreetMapAmenity from \"./getOpenStreetMapAmenity\";\n\nexport default (options: { around: number; lat: number; lng: number }) => {\n  return getOpenStreetMapAmenity({\n    amenity: \"drinking_water\",\n    ...options\n  });\n};\n","import getOpenStreetMapAmenity from \"./getOpenStreetMapAmenity\";\n\nexport default (options: { around: number; lat: number; lng: number }) => {\n  return getOpenStreetMapAmenity({\n    amenity: \"toilets\",\n    ...options\n  });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (\"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl, { scope: \"/fontanelle/\" })\n    .then(registration => {\n      console.log(registration.scope);\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC, useEffect } from \"react\";\nimport * as serviceWorker from \"./serviceWorkerRegistration\";\nimport View from \"react-flexview\";\nimport { none, Option, fromNullable, map } from \"fp-ts/lib/Option\";\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nconst ServiceWorkerWrapper: FC = () => {\n  const [showReload, setShowReload] = React.useState(false);\n  const [waitingWorker, setWaitingWorker] =\n    React.useState<Option<ServiceWorker>>(none);\n\n  const onSWUpdate = (registration: ServiceWorkerRegistration) => {\n    setShowReload(true);\n    setWaitingWorker(fromNullable(registration.waiting));\n  };\n\n  useEffect(() => {\n    serviceWorker.register({ onUpdate: onSWUpdate });\n  }, []);\n\n  const reloadPage = () => {\n    console.log(\"reload page\");\n    map<ServiceWorker, void>(ww => ww.postMessage({ type: \"SKIP_WAITING\" }))(\n      waitingWorker\n    );\n    setShowReload(false);\n    window.location.reload();\n  };\n\n  return showReload ? (\n    <View\n      className=\"updateAvailable\"\n      vAlignContent=\"center\"\n      hAlignContent=\"center\"\n      style={{\n        background: \"lightgreen\",\n        height: 25,\n        color: \"black\"\n      }}\n    >\n      Update Available\n      <span\n        style={{\n          marginLeft: 60,\n          textDecoration: \"underline\",\n          cursor: \"pointer\"\n        }}\n        onClick={() => reloadPage()}\n      >\n        Install\n      </span>\n      <span\n        style={{\n          marginLeft: 20,\n          textDecoration: \"underline\",\n          cursor: \"pointer\"\n        }}\n        onClick={() => {\n          console.log(\"ignore\");\n          setShowReload(false);\n        }}\n      >\n        Ignore\n      </span>\n    </View>\n  ) : null;\n};\n\nexport default ServiceWorkerWrapper;\n","import React from \"react\";\nimport Map from \"./Map\";\nimport View from \"react-flexview\";\nimport ServiceWorkerWrapper from \"./ServiceWorkerWrapper\";\n\nfunction App() {\n  return (\n    <View className=\"App\" style={{ height: \"100vh\", width: \"100vw\" }} column>\n      <ServiceWorkerWrapper />\n      <Map />\n    </View>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}