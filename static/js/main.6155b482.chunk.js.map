{"version":3,"sources":["DrinkingWaterMarker.tsx","Map.tsx","getDrinkingWater.ts","serviceWorkerRegistration.ts","ServiceWorkerWrapper.tsx","App.tsx","index.tsx"],"names":["props","id","enableBackground","height","viewBox","width","fill","color","d","mapboxgl","require","workerClass","default","MapFountains","React","map","none","drinkingWaterNodes","drinkingWaterMarkers","updateDrinkingWater","debounce","options","roundedLat","Math","round","lat","roundedLng","lng","formData","around","fetch","then","res","json","elements","getDrinkingWater","getCenter","this","addWaterMarkers","forEach","drinkingWaterNode","element","document","createElement","ReactDOM","DrinkingWaterMarker","marker","Marker","setLngLat","lon","addTo","push","initializeMap","accessToken","navigator","geolocation","getCurrentPosition","e","Map","container","style","center","coords","latitude","longitude","zoom","scrollZoom","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","on","some","querySelector","click","componentDidMount","componentDidUpdate","requestAnimationFrame","resize","render","grow","isLocalhost","Boolean","window","location","hostname","match","register","config","URL","process","href","origin","addEventListener","swUrl","console","log","headers","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","scope","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ServiceWorkerWrapper","showReload","setShowReload","useState","waitingWorker","setWaitingWorker","onSWUpdate","fromNullable","waiting","useEffect","className","vAlignContent","hAlignContent","background","marginLeft","textDecoration","cursor","onClick","ww","postMessage","type","App","column","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6155b482.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport default (props: { color?: string }) => (\n  <svg\n    id=\"Layer_1\"\n    enableBackground=\"new 0 0 512 512\"\n    height=\"20px\"\n    viewBox=\"0 0 512 512\"\n    width=\"20px\"\n    fill={props.color || \"blue\"}\n  >\n    <g>\n      <path d=\"m421.082 355.479c-16.269-24.198-32.288-43.872-32.962-44.698-2.849-3.49-7.115-5.514-11.62-5.514s-8.771 2.024-11.62 5.514c-.674.826-16.693 20.5-32.962 44.698-34.685 51.594-34.685 70.908-34.685 77.255 0 43.708 35.559 79.267 79.267 79.267s79.267-35.559 79.267-79.267c0-6.347 0-25.662-34.685-77.255z\" />\n      <path d=\"m71.233 64.267h224.934c8.284 0 15-6.716 15-15v-34.267c0-8.284-6.716-15-15-15h-224.934c-8.284 0-15 6.716-15 15v34.267c0 8.284 6.716 15 15 15z\" />\n      <path d=\"m56.233 159.6v64.267c0 8.284 6.716 15 15 15h19.267v-94.267h-19.267c-8.284 0-15 6.716-15 15z\" />\n      <path d=\"m329.366 256c0 8.284 6.716 15 15 15h64.268c8.284 0 15-6.716 15-15v-32.133c0-43.708-35.56-79.267-79.268-79.267h-67.466v94.267h52.466z\" />\n      <path d=\"m231.9 128.533h-1.067v-34.266h-94.267v34.267h-1.066c-8.284 0-15 6.716-15 15v96.4c0 8.284 6.716 15 15 15h96.4c8.284 0 15-6.716 15-15v-96.4c0-8.285-6.715-15.001-15-15.001z\" />\n    </g>\n  </svg>\n);\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport debounce from \"lodash/debounce\";\nimport { Map } from \"mapbox-gl\";\nimport View from \"react-flexview\";\nimport { Option, none, some, map } from \"fp-ts/lib/Option\";\nimport getDrinkingWater, { DrinkingWaterNode } from \"./getDrinkingWater\";\nimport DrinkingWaterMarker from \"./DrinkingWaterMarker\";\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"./map.scss\";\n\nconst mapboxgl = require(\"mapbox-gl/dist/mapbox-gl-csp\");\n\nmapboxgl.workerClass =\n  require(\"worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker\").default;\n\nclass MapFountains extends React.PureComponent<{}> {\n  map: Option<Map> = none;\n\n  drinkingWaterNodes: {\n    [id: string]: DrinkingWaterNode;\n  } = {};\n\n  drinkingWaterMarkers: mapboxgl.Marker[] = [];\n\n  updateDrinkingWater = debounce(() => {\n    map<Map, void>(map => {\n      getDrinkingWater({\n        around: 2000,\n        lat: map.getCenter().lat,\n        lng: map.getCenter().lng\n      }).then(this.addWaterMarkers);\n    })(this.map);\n  }, 200);\n\n  initializeMap() {\n    (mapboxgl as any).accessToken =\n      \"pk.eyJ1IjoiZnJhbmNlc2NvY2lvcmlhIiwiYSI6ImNqcThyejR6ODA2ZDk0M25rZzZjcGo4ZmcifQ.yRWHQbG1dJjDp43d01bBOw\";\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(e => {\n        const map: Map = new mapboxgl.Map({\n          container: \"map\",\n          style:\n            \"mapbox://styles/francescocioria/cjqi3u6lmame92rmw6aw3uyhm?optimize=true\",\n          center: {\n            lat: e.coords.latitude,\n            lng: e.coords.longitude\n          },\n          zoom: 15.0,\n          scrollZoom: false\n        });\n\n        map.addControl(\n          new mapboxgl.GeolocateControl({\n            positionOptions: {\n              enableHighAccuracy: true\n            },\n            trackUserLocation: true\n          })\n        );\n\n        map.on(\"load\", () => {\n          this.map = some(map);\n\n          this.updateDrinkingWater();\n\n          (\n            document.querySelector(\".mapboxgl-ctrl-geolocate\") as HTMLElement\n          )?.click();\n        });\n\n        map.on(\"move\", this.updateDrinkingWater);\n      });\n    }\n  }\n\n  addWaterMarkers = (drinkingWaterNodes: DrinkingWaterNode[]) => {\n    map<Map, void>(map => {\n      drinkingWaterNodes.forEach(drinkingWaterNode => {\n        if (!this.drinkingWaterNodes[drinkingWaterNode.id]) {\n          const element = document.createElement(\"div\");\n          ReactDOM.render(<DrinkingWaterMarker />, element);\n\n          const marker: mapboxgl.Marker = new mapboxgl.Marker({\n            element\n          }).setLngLat([drinkingWaterNode.lon, drinkingWaterNode.lat]);\n\n          marker.addTo(map);\n\n          this.drinkingWaterNodes[drinkingWaterNode.id] = drinkingWaterNode;\n\n          this.drinkingWaterMarkers.push(marker);\n        }\n      });\n    })(this.map);\n  };\n\n  componentDidMount() {\n    this.initializeMap();\n  }\n\n  componentDidUpdate() {\n    requestAnimationFrame(() => {\n      map<Map, void>(map => map.resize())(this.map);\n    });\n  }\n\n  render() {\n    return <View grow id=\"map\" />;\n  }\n}\n\nexport default MapFountains;\n","export type DrinkingWaterNode = { id: number; lat: number; lon: number };\n\nexport default async (options: {\n  around: number;\n  lat: number;\n  lng: number;\n}): Promise<DrinkingWaterNode[]> => {\n  // round to second decimal (ex: 45.537 -> 45.54; 45.4923 -> 45.49)\n  const roundedLat = Math.round(options.lat * 100) / 100;\n  const roundedLng = Math.round(options.lng * 100) / 100;\n\n  const formData = `\n    [out:json];\n    (node[\"amenity\"=\"drinking_water\"](around:${options.around},${roundedLat},${roundedLng}););\n    out;>;out;\n  `;\n\n  return fetch(\n    `https://overpass-api.de/api/interpreter?data=${formData}&output&cache-only=true`\n  )\n    .then((res): Promise<{ elements: DrinkingWaterNode[] }> => res.json())\n    .then(res => res.elements);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (\"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      console.log(\"load\", isLocalhost, swUrl);\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl, { scope: \"/fontanelle/\" })\n    .then(registration => {\n      console.log(registration.scope);\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC, useEffect } from \"react\";\nimport * as serviceWorker from \"./serviceWorkerRegistration\";\nimport View from \"react-flexview\";\nimport { none, Option, fromNullable, map } from \"fp-ts/lib/Option\";\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nconst ServiceWorkerWrapper: FC = () => {\n  const [showReload, setShowReload] = React.useState(false);\n  const [waitingWorker, setWaitingWorker] =\n    React.useState<Option<ServiceWorker>>(none);\n\n  const onSWUpdate = (registration: ServiceWorkerRegistration) => {\n    setShowReload(true);\n    setWaitingWorker(fromNullable(registration.waiting));\n  };\n\n  useEffect(() => {\n    serviceWorker.register({ onUpdate: onSWUpdate });\n  }, []);\n\n  const reloadPage = () => {\n    console.log(\"reload page\");\n    map<ServiceWorker, void>(ww => ww.postMessage({ type: \"SKIP_WAITING\" }))(\n      waitingWorker\n    );\n    setShowReload(false);\n    window.location.reload();\n  };\n\n  return showReload ? (\n    <View\n      className=\"updateAvailable\"\n      vAlignContent=\"center\"\n      hAlignContent=\"center\"\n      style={{\n        background: \"lightgreen\",\n        height: 25,\n        color: \"black\"\n      }}\n    >\n      Update Available\n      <span\n        style={{\n          marginLeft: 60,\n          textDecoration: \"underline\",\n          cursor: \"pointer\"\n        }}\n        onClick={() => reloadPage()}\n      >\n        Install\n      </span>\n      <span\n        style={{\n          marginLeft: 20,\n          textDecoration: \"underline\",\n          cursor: \"pointer\"\n        }}\n        onClick={() => {\n          console.log(\"ignore\");\n          setShowReload(false);\n        }}\n      >\n        Ignore\n      </span>\n    </View>\n  ) : null;\n};\n\nexport default ServiceWorkerWrapper;\n","import React from \"react\";\nimport Map from \"./Map\";\nimport View from \"react-flexview\";\nimport ServiceWorkerWrapper from \"./ServiceWorkerWrapper\";\n\nfunction App() {\n  return (\n    <View className=\"App\" style={{ height: \"100vh\", width: \"100vw\" }} column>\n      <ServiceWorkerWrapper />\n      <Map />\n    </View>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}